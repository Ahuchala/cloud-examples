︠b5eb3b78-dd91-4d03-9235-b33cf1924ec3i︠
%md
# Different Approximations of $\pi$
︡ae47d4fa-f622-49d3-b9e7-ca96dde9c507︡{"html":"<h1>Different Approximations of $\\pi$</h1>\n"}︡
︠35c9d02b-f26e-4754-b67f-fd822ada39e8︠
# Sage's value
n(pi, digits = 100)
︡4ceae033-5559-40a8-aba3-fda5aab4f380︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡
︠7b5595c9-bbe6-4423-9604-a8b622a8a83f︠
# using mpmath - http://code.google.com/p/mpmath/
import mpmath as mm
mm.mp.dps = 100
print mm.pi
print 2*mm.asinh(1j).imag
print mm.gamma(0.5)**2
print mm.sqrt(6*mm.zeta(2))
print mm.quad(lambda x: 4*mm.sqrt(1-x**2), [0, 1])
print mm.quad(lambda x: mm.exp(-x**2), [-mm.inf, mm.inf]) ** 2
print mm.nsum(lambda n: 4*(-1)**n/(2*n+1), [0, mm.inf])
print mm.limit(lambda n: 2**(4*n+1)*mm.factorial(n)**4/(2*n+1)/mm.factorial(2*n)**2, mm.inf)
print mm.findroot(mm.sin, 3.14)
︡fa85768a-4c20-4cf1-b1a5-1cfc650e07c5︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068"}︡{"stdout":"\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡{"stdout":"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\n"}︡
︠f113fb20-74bd-4bb2-aec9-cf822176829e︠
# dropping points
import numpy as np
N = 10000
x, y = 2 * np.random.rand(2, N) - 1
inside = np.sum(np.sqrt(x^2 + y^2) <= 1)
list_plot(zip(x, y), color='gray', size = 1) + circle((0,0), 1, color= 'green')
print("pi ~ %f" % (float(inside) / N * 4))
︡a921f5f9-7e8e-44f4-a277-02ba73723448︡{"once":false,"file":{"show":true,"uuid":"a4da6194-7318-4322-9b89-523a91bf6be3","filename":"/mnt/home/2Qrdjpk5/.sage/temp/compute3a/10749/tmp_CSF_fq.png"}}︡{"stdout":"pi ~ 3.135200\n"}︡
︠a4a7ccad-d22b-4ddf-9f44-496f3cc6e4b6︠









